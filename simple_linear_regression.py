# -*- coding: utf-8 -*-
"""Simple Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19uWg-4FerVw2JRn5B2LaCNTntP042a2G
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets,linear_model

diabates=datasets.load_diabetes()

print(diabates.keys())

print(diabates.data)
print(diabates.DESCR)

#diabates_X=diabates.data[:,np.newaxis,2]#simple lr
#diabates_X=diabates.data#polynomial lr
diabates_X=np.array([[1],[2],[3]])

print(diabates_X)

#diabates_X_train=diabates_X[:-30]
#diabates_X_test=diabates_X[-20:]
#diabates_X_train.shape
diabates_X_train=diabates_X
diabates_X_test=diabates_X

#diabates_y_train=diabates.target[:-30]
#diabates_y_test=diabates.target[-20:]
#diabates_y_train.shape
diabates_y_train=np.array([3,2,4])
diabates_y_test=np.array([3,2,4])

model=linear_model.LinearRegression()
model.fit(diabates_X_train,diabates_y_train)

diabates_predict=model.predict(diabates_X_test)

from sklearn.metrics import mean_squared_error

print("MSE:",mean_squared_error(diabates_y_test,diabates_predict))

print("weights:",model.coef_)
print("intercept:",model.intercept_)

plt.scatter(diabates_X_test,diabates_y_test)

plt.plot(diabates_X_test,diabates_predict)
plt.show()




#plot can be used only when we use single feature bcz that only generates a line
#but if we use multiple features we cannot draw a plane

